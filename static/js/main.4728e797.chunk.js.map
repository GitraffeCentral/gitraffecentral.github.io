{"version":3,"sources":["components/download-button/index.tsx","components/banner/index.tsx","components/application/index.tsx","serviceWorker.ts","index.tsx","resources/logo.png"],"names":["DownloadButton","props","useState","hovered","setHovered","className","align","onMouseEnter","onMouseLeave","onClick","Icon","component","hoveredIcon","notHoveredIcon","style","marginRight","text","Header","Layout","Content","Text","Typography","Banner","Paragraph","NavBar","span","shape","size","src","Logo","justify","mode","strong","notAvailableNotification","notification","message","Title","AiOutlineDownload","SiWindows","SiApple","SiUbuntu","App","Footer","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"4aAsBeA,EAjBQ,SAACC,GAAgB,IAAD,EAEPC,oBAAS,GAFF,mBAE9BC,EAF8B,KAErBC,EAFqB,KAGrC,OACE,kBAAC,IAAD,CACEC,UAAY,kBACZC,MAAM,SACNC,aAAc,kBAAMH,GAAW,IAC/BI,aAAc,kBAAMJ,GAAW,IAC/BK,QAASR,EAAMQ,SAEf,kBAACC,EAAA,EAAD,CAAMC,UAAYR,EAAWF,EAAMW,YAAcX,EAAMY,eAAgBC,MAAO,CAACC,YAAY,UAC1Fd,EAAMe,OCPLC,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QACRC,EAAoBC,IAApBD,KA8EOE,GA9EaD,IAAdE,UAEC,WAAO,IAAD,EAEqBrB,oBAAS,GAF9B,mBAGbsB,GAHa,UAGJ,kBACb,kBAAC,IAAD,CAAKlB,MAAM,UACT,kBAAC,IAAD,CAAKmB,KAAM,GACT,kBAAC,IAAD,CAAKnB,MAAM,UACT,kBAAC,IAAD,CAAQD,UAAU,cAAcqB,MAAM,SAASC,KAAM,GAAIC,IAAKC,MAC9D,kBAACT,EAAD,CAAMf,UAAU,mBAAhB,gBAGJ,kBAAC,IAAD,CAAKoB,KAAM,IACT,kBAAC,IAAD,CAAKK,QAAQ,UACX,kBAAC,IAAD,CAAMzB,UAAU,cAAc0B,KAAK,iBAIvC,kBAAC,IAAD,CAAKN,KAAM,GACT,kBAAC,IAAD,CAAKK,QAAQ,UACX,kBAACV,EAAD,CAAMf,UAAU,uBAAhB,YAEE,kBAACe,EAAD,CAAMf,UAAU,qBAAqB2B,QAAM,GAA3C,iBASJC,EAA2B,WAC/BC,IAAY,KAAS,CACnBC,QAAS,wBAIb,OACE,kBAAC,IAAD,CAAQ9B,UAAU,uBAChB,kBAACc,EAAD,CAASd,UAAU,wBACjB,kBAACY,EAAD,CAAQZ,UAAU,iBAChB,kBAACmB,EAAD,OAEF,kBAACL,EAAD,CAASd,UAAU,kBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKoB,KAAM,IACX,kBAAC,IAAD,CAAKA,KAAM,GACT,kBAAC,IAAWW,MAAZ,uBACA,uBAAG/B,UAAU,kBAAb,wEAGA,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEO,YAAayB,IACbxB,eAAgByB,IAChB7B,QAASwB,EACTjB,KAAK,YACP,kBAAC,EAAD,CACEJ,YAAayB,IACbxB,eAAgB0B,IAChB9B,QAASwB,EACTjB,KAAK,QACP,kBAAC,EAAD,CACEJ,YAAayB,IACbxB,eAAgB2B,IAChB/B,QAASwB,EACTjB,KAAK,aAGX,kBAAC,IAAD,CAAKS,KAAM,WChERgB,GAbIvB,IAAXwB,OAEI,WACV,OACE,kBAAC,IAAD,CAAQrC,UAAU,sBAChB,kBAAC,EAAD,MACI,yBAAKS,MAAO,CAAC6B,OAAQ,cCEXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1B,a,mBEjJ5B4B,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.4728e797.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\nimport { Row } from 'antd';\nimport Icon from '@ant-design/icons';\n\nconst DownloadButton = (props: any) => {\n\n  const [hovered, setHovered] = useState(false)\n  return (\n    <Row  \n      className = 'download-button' \n      align='middle' \n      onMouseEnter={() => setHovered(true)} \n      onMouseLeave={() => setHovered(false)}\n      onClick={props.onClick}\n    >\n      <Icon component={(hovered) ? props.hoveredIcon : props.notHoveredIcon} style={{marginRight:'10px'}}/> \n      {props.text}\n    </Row>\n  );\n}\n\nexport default DownloadButton;","import React, { useState } from 'react';\r\nimport './index.css';\r\nimport Logo from '../../resources/logo.png'\r\nimport { Layout, Menu, Typography, Row, Col, Avatar, Button, Space, notification } from 'antd';\r\nimport MacButton from '../../resources/mac-download.svg';\r\nimport WindowsButton from '../../resources/windows-download.svg';\r\nimport Icon from '@ant-design/icons';\r\nimport { SiUbuntu, SiWindows, SiApple } from 'react-icons/si';\r\nimport { AiOutlineDownload } from 'react-icons/ai';\r\nimport DownloadButton from '../download-button'\r\nconst { Header, Content } = Layout;\r\nconst { Text, Paragraph } = Typography;\r\n\r\nconst Banner = () => {\r\n\r\n  const [windowsHover, setWindowsHover] = useState(false)\r\n  const NavBar = () => (\r\n    <Row align='middle'>\r\n      <Col span={4}>\r\n        <Row align='middle'>\r\n          <Avatar className='banner_logo' shape='square' size={32} src={Logo} />\r\n          <Text className='banner_app-name'> Gitraffe </Text>\r\n        </Row>\r\n      </Col>\r\n      <Col span={16}>\r\n        <Row justify='center'>\r\n          <Menu className='banner_menu' mode=\"horizontal\">\r\n          </Menu>\r\n        </Row>\r\n      </Col>\r\n      <Col span={4}>\r\n        <Row justify='center'>\r\n          <Text className='banner_launch-title'>\r\n            Launching\r\n            <Text className='banner_launch-date' strong>\r\n              Q1 2021\r\n            </Text>\r\n          </Text>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  )\r\n\r\n  const notAvailableNotification = () => {\r\n    notification['info']({\r\n      message: 'Coming Spring 2021'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Layout className='banner_first_layout'>\r\n      <Content className='banner_gradient_skew'>\r\n        <Header className='banner_header'>\r\n          <NavBar />\r\n        </Header>\r\n        <Content className='banner_content'>\r\n          <Row>\r\n            <Col span={4} />\r\n            <Col span={8}>\r\n              <Typography.Title>Git Simplified</Typography.Title>\r\n              <p className='banner_subtext'>\r\n                Leverage the power of Git through a minimal and intuitive interface.\r\n              </p>\r\n              <Space>\r\n                <DownloadButton\r\n                  hoveredIcon={AiOutlineDownload}\r\n                  notHoveredIcon={SiWindows}\r\n                  onClick={notAvailableNotification}\r\n                  text='Windows' />\r\n                <DownloadButton\r\n                  hoveredIcon={AiOutlineDownload}\r\n                  notHoveredIcon={SiApple}\r\n                  onClick={notAvailableNotification}\r\n                  text='Mac' />\r\n                <DownloadButton\r\n                  hoveredIcon={AiOutlineDownload}\r\n                  notHoveredIcon={SiUbuntu}\r\n                  onClick={notAvailableNotification}\r\n                  text='Debian' />\r\n              </Space>\r\n            </Col>\r\n            <Col span={16} />\r\n          </Row>\r\n        </Content>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport './index.css';\r\nimport { Layout } from 'antd';\r\nimport Banner from '../banner';\r\nconst { Footer } = Layout;\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout className='application_layout'>\r\n      <Banner/>\r\n          <div style={{height: '200vh'}}>\r\n          </div>\r\n      {/*<Footer className='application_footer'>Â© Gitraffe</Footer>*/}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/application';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee0e8b6e.png\";"],"sourceRoot":""}