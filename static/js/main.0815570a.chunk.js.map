{"version":3,"sources":["resources/interactive-rebase-mac.png","components/header/index.tsx","pages/home/index.tsx","components/navigator/index.tsx","components/application/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","title","ghost","extra","href","type","shape","size","style","background","borderWidth","verticalAlign","ArrowRightOutlined","Title","Layout","Content","Typography","Home","Paragraph","width","height","display","flexDirection","align","justify","flex","fontSize","color","textAlign","src","InteractiveRebaseMac","Navigator","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oD,8PCgB5BC,G,OAXA,WACX,OACA,kBAAC,IAAD,CAAYC,UAAU,cAAcC,MAAM,GAAGC,OAAO,EAAOC,MACvD,uBAAGC,KAAK,gDACJ,kBAAC,IAAD,CAAQC,KAAK,UAAUC,MAAM,QAAQC,KAAM,QAAUC,MAAO,CAACC,WAAY,2CAA4CC,YAAa,IAAKC,cAAe,WAAtJ,kBACuB,kBAACC,EAAA,EAAD,Y,8DCJ3BC,GADYC,IAAZC,QACqBC,IAArBH,OAgDOI,GAhDcD,IAAdE,UAEF,WACX,OACE,yBACEV,MAAO,CACLC,WAAY,UACZU,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,WAGjB,kBAAC,IAAD,CACEC,MAAM,SACNC,QAAQ,SACRhB,MAAO,CAAEW,MAAO,OAAQM,KAAM,aAE9B,kBAACZ,EAAD,CACEL,MAAO,CAAEkB,SAAU,MAAOC,MAAO,UAAWC,UAAW,WADzD,iCAMF,kBAAC,IAAD,CACEL,MAAM,SACNC,QAAQ,SACRhB,MAAO,CAAEW,MAAO,OAAQM,KAAM,aAE9B,yBAAKjB,MAAO,CAAEmB,MAAO,QAASD,SAAU,MAAOE,UAAW,WACxD,4CADF,kFAGE,6BAHF,wIAQF,kBAAC,IAAD,CACEL,MAAM,SACNC,QAAQ,SACRhB,MAAO,CAAEW,MAAO,MAAOM,KAAM,QAE7B,yBAAKI,IAAKC,IAAsBX,MAAM,YC/B/BY,EAbG,WAEd,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,UCOLC,EAXH,WACV,OACE,kBAAC,IAAD,CAAQlC,UAAU,sBAChB,kBAAC,EAAD,MACA,kBAAC,IAAOe,QAAR,KACE,kBAAC,EAAD,SCCYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0815570a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/interactive-rebase-mac.706d6775.png\";","import { PageHeader, Button, Row } from \"antd\";\r\nimport { ArrowRightOutlined } from '@ant-design/icons';\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n    <PageHeader className=\"header_root\" title=\"\" ghost={false} extra={\r\n        <a href=\"https://x836on4k62z.typeform.com/to/KGopr4aR\">\r\n            <Button type=\"primary\" shape=\"round\" size={\"large\"}  style={{background: \"linear-gradient(45deg, #ee0979, #ff6a00)\", borderWidth: '0', verticalAlign: \"middle\"}}>\r\n                    Request Access <ArrowRightOutlined />\r\n            </Button>\r\n    </a>} />\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Layout, Typography, Row } from \"antd\";\r\nimport \"./index.css\";\r\nimport InteractiveRebaseMac from \"../../resources/interactive-rebase-mac.png\";\r\n\r\nconst { Content } = Layout;\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        background: \"#1f1f1f\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Row\r\n        align=\"middle\"\r\n        justify=\"center\"\r\n        style={{ width: \"100%\", flex: \"0 0 auto\" }}\r\n      >\r\n        <Title\r\n          style={{ fontSize: \"8vh\", color: \"#a0aec0\", textAlign: \"center\" }}\r\n        >\r\n          Aspirin for Version Control.\r\n        </Title>\r\n      </Row>\r\n      <Row\r\n        align=\"middle\"\r\n        justify=\"center\"\r\n        style={{ width: \"100%\", flex: \"0 0 auto\" }}\r\n      >\r\n        <div style={{ color: \"white\", fontSize: \"2vh\", textAlign: \"center\" }}>\r\n          <strong>Gitraffe</strong> helps you leverage the power of Git through\r\n          a minimal and intuitive interface.\r\n          <br />\r\n          Minimize hiccups with Interactive Rebase, Cherry Picking, Reflog,\r\n          Commit + History Editing, Quick Actions, and Tailored Workspaces.\r\n        </div>\r\n      </Row>\r\n      <Row\r\n        align=\"middle\"\r\n        justify=\"center\"\r\n        style={{ width: \"100\", flex: \"1 1\" }}\r\n      >\r\n        <img src={InteractiveRebaseMac} width=\"50%\" />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch as RouterSwitch } from \"react-router-dom\";\r\nimport Home from \"../../pages/home\";\r\n\r\nconst Navigator = () => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <RouterSwitch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n            </RouterSwitch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Navigator;","import React from \"react\";\r\nimport \"./index.css\";\r\nimport { Layout } from \"antd\";\r\nimport Header from \"../header\";\r\nimport Navigator from \"../navigator\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout className=\"application_layout\">\r\n      <Header />\r\n      <Layout.Content>\r\n        <Navigator />\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/application\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}